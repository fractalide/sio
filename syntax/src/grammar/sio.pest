main = _{ SOI ~ statement+ ~ EOI }
statement = {
    skip
    | variable_creation
    | var_to_var_binding
    | value_creation
    | conditional
    | pattern_match
    | procedure_appl
    | module_def
}
    skip = { "skip" }
    variable_creation = {
        "let" ~ "{"
            ~ declaration*
        ~ "}" ~ "in" ~ "{"
            ~ statement*
        ~ "}"
    }
        declaration = {
            typed_identifier
            | data_type_decl
        }
            typed_identifier = { ident   ~ ":" ~ type_decl }
    var_to_var_binding = {
        ident   ~ "=" ~ type_ident ~ "(" ~ ( value ~ ( "," ~ value)* ) ~ ")"
        | ident ~ "=" ~ type_ident
        | ident ~ "=" ~ ident
    }
    value_creation = { ident ~ "=" ~ value }
        value = { number
            | boolean
            | string
            | procedure_def
            | record
            | array
            | tuple
            | list
            | set}
            number = { integer | decimal }
            record = { "{" ~ ( record_pair ~ ( "," ~ record_pair)* )? ~ "}" }
                record_pair    = { record_key~ ":" ~ value }
                record_key= { integer | atom | boolean | string | char }
            array  = { "[|" ~ ( value ~ ( "," ~ value )* )? ~ "|]" }
            list   = { "["  ~ ( value ~ ( "," ~ value )* )? ~ "]"  }
            tuple  = { "("  ~ ( value ~ ( "," ~ value )* )? ~ ")"  }
            set    = { "<"  ~ ( value ~ ( "," ~ value )* )? ~ ">"  }
    conditional = {
        "if" ~ ident ~ "{"
            ~ statement+
        ~ "}"
        ~ ( "else" ~ "{" ~ statement+ ~ "}" )?
    }
    pattern_match = {
        "match" ~ ident
        ~ "{"
        | list_match
            ~ (type_ident ~ "=>" ~ "{" ~ statement+ ~ "}")+
        ~ "}"
    }
        list_match = {
            "|"   ~ "[" ~ ident ~ "," ~ ident ~ "," ~ ident ~ "]" ~ "=>" ~ statement* ~ "}"
            | "|" ~ "[" ~ ident ~ "," ~ ident ~ "]" ~ "=>" ~ "{" ~ statement* ~ "}"
            | "|" ~ "[" ~ "]" ~ "=>" ~ "{" ~ statement* ~ "}"
        }
        array_match = {
            "|"   ~ "[|" ~ ident ~ "," ~ ident ~ "|]" ~ "=>" ~ "{" ~ statement* ~ "}"
            | "|" ~ "[|" ~ ident ~ "|]" ~ "=>" ~ "{" ~ statement* ~ "}"
            | "|" ~ "[|" ~ "|]" ~ "=>" ~ "{" ~ statement* ~ "}"
        }
    procedure_appl = {
        ident ~ "("
            ~ ident ~ ("," ~ ident)*
        ~ ")"
    }
    module_def = {
        "mod" ~ module_name ~ "{"
            ~ named_procedure_def+
        ~ "}"
    }
        module_name = @{ ident }

named_procedure_def = { stability? ~ procedure_name ~ "::" ~ procedure_def }
    stability = @{ raw | draft | stable | deprecated | legacy }
        raw        = { "raw" }
        draft      = { "draft" }
        stable     = { "stable" }
        deprecated = { "deprecated" }
        legacy     = { "legacy" }
    procedure_name = @{ ident }
    procedure_def = {
        "(" ~ (procedure_parameter ~ ("," ~ procedure_parameter)*)? ~ ")"
        ~ ( "->" ~ return_type )?
        ~ "{" ~ procedure_body ~ "}"
    }
        procedure_parameter = { typed_identifier }
        return_type = { type_ident }
        procedure_body = { statement+ }
literal = { atom | boolean | char | string }
    char = { "'" ~ ASCII_ALPHA ~ "'" }
type_ident = {
    user_defined_type
    | record_type_decl
    | list_type_decl
    | array_type_decl
    | tuple_type_decl
    | set_type_decl
}
    user_defined_type = @{
        ASCII_ALPHA_UPPER ~ (ASCII_ALPHA_LOWER | ASCII_DIGIT | ASCII_ALPHA_UPPER)* ~ "<" ~ (user_defined_type ~ ( "," ~ user_defined_type)* ) ~ ">"

        |ASCII_ALPHA_UPPER ~ (ASCII_ALPHA_LOWER | ASCII_DIGIT | ASCII_ALPHA_UPPER)* ~ "(" ~ (user_defined_type ~ ( "," ~ user_defined_type)* ) ~ ")"
        | ASCII_ALPHA_UPPER ~ (ASCII_ALPHA_LOWER | ASCII_DIGIT | ASCII_ALPHA_UPPER)*
    }
boolean = { true_lit | false_lit }
true_lit = { "true" }
false_lit = { "false" }
atom = { ident }
string = @{ "\"" ~ ( "\"\"" | (!"\"" ~ ANY) )* ~ "\"" }
integer = @{ "_"? ~ ASCII_DIGIT+ }
decimal = @{ "_"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
ident = @{ ASCII_ALPHA_LOWER ~ ( ASCII_ALPHA_LOWER | ASCII_DIGIT | "_")* }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/"}

/* Type Declaration */
data_type_decl = {
    "data"
    ~ type_decl
    ~ "="
    | ("|" ~ variant_constructor) {2,}
    | variant_constructor
}
type_decl = {
    generic_data_type_decl
    | no_generic_data_type_decl
    | collection_decl
}
generic_data_type_decl = {
    data_type_name
    ~ "<"
    ~ type_decl ~ ("," ~ type_decl)*
    ~ ">"
}
no_generic_data_type_decl = {
    data_type_name
}
variant_constructor = {
    product_variant_constructor
    | empty_variant_constructor
}
data_type_name = @{
    ASCII_ALPHA_UPPER ~ (ASCII_ALPHA_LOWER | ASCII_DIGIT | ASCII_ALPHA_UPPER)*
}
generic_type_label = { generic_type_name }
generic_type_name = @{
    ASCII_ALPHA_UPPER ~ (ASCII_ALPHA_LOWER | ASCII_DIGIT | ASCII_ALPHA_UPPER)*
}
product_variant_constructor = {
    variant_constructor_name
    ~ "("
    ~ type_decl ~ ("," ~ type_decl)*
    ~ ")"
}
empty_variant_constructor = {
    variant_constructor_name
}
variant_constructor_name = @{
    ASCII_ALPHA_UPPER ~ (ASCII_ALPHA_LOWER | ASCII_DIGIT | ASCII_ALPHA_UPPER)*
}
collection_decl = {
    record_type_decl
    | list_type_decl
    | array_type_decl
    | tuple_type_decl
    | set_type_decl
}
record_type_decl = { "{" ~ (record_pair_decl ~ ("," ~ record_pair_decl)*) ~ "}" }
    record_pair_decl = { key_type_decl ~ ":" ~ type_decl}
        key_type_decl  = {
            i64_type
            | bool_type
            | string_type
            | char_type
            | atom_type
        }
list_type_decl   = { "[" ~ type_decl ~ "]" }
array_type_decl  = { "[|" ~ array_length ~ ";" ~ type_decl ~ "|]" }
    array_length = { integer }
tuple_type_decl  = { "(" ~ (type_decl ~ ("," ~ type_decl)*)? ~ ")" }
set_type_decl    = { "<" ~ type_decl ~ ">" }

atom_type   = { "Atom" }
bool_type   = { "Bool" }
i64_type    = { "I64" }
f64_type    = { "F64" }
string_type = { "String" }
char_type   = { "Char" }
unit_type   = { "Unit" }
