main = _{ SOI ~ module+ ~ EOI }
paren_open = { "(" }
paren_close = { ")" }
module = {
    paren_open ~
    "md" ~
    module_body+ ~
    paren_close
}
module_body = {
    param |
    result |
    function
}
function = {
    paren_open ~
    (exported_function | internal_function) ~
    instruction+ ~
    paren_close
}
exported_function = { "ef" }
internal_function = { "if" }
instruction = {
    numeric_instruction |
    boolean_instruction |
    char_instruction
}
numeric_instruction = {
    signed_integer_instruction |
    unsigned_integer_instruction |
    float_instruction
}
signed_integer_instruction = {
    signed_integer_lit ~ "." ~ signed_integer_op
}
unsigned_integer_instruction = {
    unsigned_integer_lit ~ "." ~ unsigned_integer_op
}
float_instruction = {
    float_lit ~ "." ~ float_op
}
signed_integer_op = {
    constant_op |
    equal_zero_op |
    equal_op |
    not_equal_op |
    greater_than_op |
    less_than_op |
    greater_than_or_equal_op |
    less_than_or_equal_op |
    add_op |
    subtract_op |
    multiplication_op |
    division_op |
    remainder_op |
    and_op |
    or_op |
    xor_op |
    shift_left_op |
    shift_right_op |
    rotate_left_op |
    rotate_right_op |
    count_leading_zeros |
    count_trailing_zeros |
    population_count
}
unsigned_integer_op = {
    constant_op |
    equal_zero_op |
    equal_op |
    not_equal_op |
    greater_than_op |
    less_than_op |
    greater_than_or_equal_op |
    less_than_or_equal_op |
    add_op |
    subtract_op |
    multiplication_op |
    division_op |
    remainder_op |
    and_op |
    or_op |
    xor_op |
    shift_left_op |
    shift_right_op |
    rotate_left_op |
    rotate_right_op |
    count_leading_zeros |
    count_trailing_zeros |
    population_count
}
float_op = {
    constant_op |
    equal_op |
    negate_op |
    nearest_op |
    not_equal_op |
    greater_than_op |
    less_than_op |
    greater_than_or_equal_op |
    less_than_or_equal_op |
    add_op |
    subtract_op |
    multiplication_op |
    division_op |
    remainder_op |
    minimum_op |
    maximum_op |
    ceiling_op |
    floor_op |
    truncate_op |
    absolute_op |
    square_root_op
}
constant_op = { "const" ~ number_inst }
equal_zero_op = { "eqz" }
equal_op = { "eq" }
not_equal_op = { "ne" }
greater_than_op = { "gt" }
less_than_op = { "lt" }
greater_than_or_equal_op = { "ge" }
less_than_or_equal_op = { "le" }
add_op = { "add" }
subtract_op = { "sub" }
multiplication_op = { "mul" }
division_op = { "div" }
remainder_op = { "rem" }
minimum_op = { "min" }
maximum_op = { "max" }
nearest_op = { "nearest" }
ceiling_op = { "ceil" }
floor_op = { "floor" }
truncate_op = { "trunc" }
absolute_op = { "abs" }
negate_op = { "neg" }
square_root_op = { "sqrt" }
and_op = { "and" }
or_op = { "or" }
xor_op = { "xor" }
shift_left_op = { "shl" }
shift_right_op = { "shr" }
rotate_left_op = { "rotl" }
rotate_right_op = { "rotr" }
count_leading_zeros = { "clz" }
count_trailing_zeros = { "ctz" }
population_count = { "popcnt" }

primitive_lit = {
    number_lit |
    boolean_lit |
    char_lit
}
number_lit = {
    signed_integer_lit |
    unsigned_integer_lit |
    float_lit
}
signed_integer_lit = {
    i8_lit |
    i32_lit |
    i64_lit |
    i128_lit
}
unsigned_integer_lit = {
    u8_lit |
    u32_lit |
    u64_lit |
    u128_lit
}
float_lit = {
    f32_lit |
    f64_lit
}
i8_lit = { "i8" }
i32_lit = { "i32" }
i64_lit = { "i64" }
i128_lit = { "i128" }
u8_lit = { "u8" }
u32_lit = { "u32" }
u64_lit = { "u64" }
u128_lit = { "u128" }
f32_lit = { "f32" }
f64_lit = { "f64" }
number_inst = { decimal_inst | integer_inst }
integer_inst = @{ ASCII_DIGIT+ }
decimal_inst = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
boolean_instruction = {
    boolean_lit ~ "." ~ boolean_op
}
boolean_op = {
    equal_zero_op
}
boolean_lit = { "bool" }
boolean_val = {
    true_lit |
    false_lit
}
true_lit = { "t" }
false_lit = { "f" }
char_instruction = {
    char_lit ~ "." ~ char_op
}
char_op = {
    equal_op
}
char_lit = { "char" }
param = {
    paren_open ~ "pr" ~ primitive_lit ~ paren_close
}
result = {
    paren_open ~ "rs" ~ primitive_lit ~ paren_close
}
WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE)}
